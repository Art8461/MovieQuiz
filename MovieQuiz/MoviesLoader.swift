//
//  MoviesLoader.swift
//  MovieQuiz
//
//  Created by Artem Kuzmenko on 12.07.2025.
//

import Foundation

protocol MoviesLoading {
    func loadMovies(handler: @escaping (Result<MostPopularMovies, Error>) -> Void)
}
struct MoviesLoader: MoviesLoading {
    // MARK: - NetworkClient
    private let networkClient = NetworkClient()
    
    // MARK: - URL
    private var mostPopularMoviesUrl: URL {
        // –ï—Å–ª–∏ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ URL, —Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–ø–∞–¥—ë—Ç —Å –æ—à–∏–±–∫–æ–π
        guard let url = URL(string: "https://tv-api.com/en/API/Top250Movies/k_zcuw1ytf") else {
            preconditionFailure("Unable to construct mostPopularMoviesUrl")
        }
        return url
    }
    
    func loadMovies(handler: @escaping (Result<MostPopularMovies, Error>) -> Void) {
        print("üì° –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∏–ª—å–º—ã...")
        networkClient.fetch(url: mostPopularMoviesUrl) { result in
            switch result {
            case .success(let data):
                print("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: \(data.count) –±–∞–π—Ç")
                if let jsonString = String(data: data, encoding: .utf8) {
                    print("üì¶ JSON –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n\(jsonString)")
                }
                do {
                    let mostPopularMovies = try JSONDecoder().decode(MostPopularMovies.self, from: data)
                    print("‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ")
                    handler(.success(mostPopularMovies))
                } catch {
                    print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: \(error)")
                    handler(.failure(error))
                }
            case .failure(let error):
                print("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: \(error)")
                handler(.failure(error))
            }
        }
    }
}
